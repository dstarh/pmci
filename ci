#!/bin/bash
JAVA_HOME=`/usr/libexec/java_home -v 1.8`
if [ "$EMAIL" = "" ]
then
  echo "Please set EMAIL"
  exit 1
fi

if [ "$#" -lt 1 ]; then
  echo "Please specify at least one branch name"
  exit 1
fi

if [ "$SLEEP_INTERVAL" = "" ]
then
  SLEEP_INTERVAL="30s"
fi

repository_name=$(basename `git rev-parse --show-toplevel`)
working_folder="/tmp/$repository_name"
mkdir -p "$working_folder"

while [ 1 ]; do
  for branch in $@
  do
    underscored_branch=${branch//\//_}    
    log_file="$working_folder/$underscored_branch.log"
    
    # -d Remove untracked directories in addition to untracked files.
    git clean -d --force
    # in case this is the first time we're seeing this branch
    # FIXME: this is going to spit out a "fatal" warning if branch already tracked
    # -t, --track When creating a new branch, set up "upstream" configuration.
    git checkout --track origin/$branch
    git checkout $branch
    git fetch origin
    git ls-remote . | grep "heads/$branch$" | awk '{print $1}' > $working_folder/$underscored_branch-heads.hash
    git ls-remote . | grep "origin/$branch$" | awk '{print $1}' > $working_folder/$underscored_branch-origin.hash
    DIFF=`diff $working_folder/$underscored_branch-heads.hash $working_folder/$underscored_branch-origin.hash`
    if [ "" != "$DIFF" ]; then
      # --hard Any changes to tracked files in the working tree discarded.
      git reset --hard origin/$branch > $log_file 2>&1
      comment=`git log --oneline -1`      
      ant run-unit-tests >> $log_file 2>&1
      ERRORS_COUNT=`egrep 'FAILED:' $log_file | wc -l`      
      headline="$ERRORS_COUNT tests failed for $repository_name $branch $comment"
      tail -n 200 $log_file | mail -s "$headline" $EMAIL
      
    else
      echo NO CHANGES YET
    fi
    sleep "$SLEEP_INTERVAL"
  done
done
